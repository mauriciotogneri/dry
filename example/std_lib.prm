# String

split(text: string, delimiter: string): [string]
format(text: string, ...args): string

# List

list(value1: T, ...): [T] -> list(index: num): T
length(list: [T]): num
concat(list1: [T], list2: [T]): [T]
isEmpty(list: [T]): bool
isNotEmpty(list: [T]): bool
contains(a: T, list: [T]): bool
join(list: [T], delimiter: string): string
first(list: [T]): T
last(list: [T]): T
tail(list: [T]): [T]
take(a: num, list: [T]): [T]
drop(a: num, list: [T]): [T]
addFirst(a: T, list: [T]): [T]
addLast(a: T, list: [T]): [T]
push(a: T, list[T]): [T]
pop(list: [T]): [T]
remove(index: num, list: [T]): [T]
removeFirst(list: [T]): [T]
removeLast(list: [T]): [T]
reverse(list: [T]): [T]
clear(object: [T]): [T]

# Object

object(key1: string, value1: T, ...): {T}
keys(object: {T}): [string]
containsKey(a: string, object: {T}): bool
isEmpty(object: {T}): bool
isNotEmpty(object: {T}): bool
get(field: string, object: {T}): T -> object(field: string): {T}
set(field: string, value: T, object: {T}): {T} -> object(field: string, value: T): {T}
remove(field: string, object: {T}): {T}
clear(object: {T}): {T}

# Functions

map(func: function, list: [T]): [T]
filter(func: function, list: [T]): [T]
reduce(func: function, list: [T], initial: T): T
sort(func: function, list: [T]): [T]
all(func: function, list: [T]): bool
any(func: function, list: [T]): bool
zip(func: function, list1: [T], list2: [T]): [T]