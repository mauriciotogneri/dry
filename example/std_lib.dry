# Generic

eq(a: T, b: T): bool
neq(a: T, b: T): bool

# Numbers

abs(a: num): num
inc(a: num): num
dec(a: num): num
sum(a: num, b: num, ...): num
sub(a: num, b: num): num
mul(a: num, b: num): num
div(a: num, b: num): num
mod(a: num, b: num): num
min(a: num, b: num, ...): num
max(a: num, b: num, ...): num
pow(a: num, b: num): num
sqrt(a: num): num
round(a: num): num
floor(a: num): num
ceil(a: num): num
sin(a: num): num
cos(a: num): num
tan(a: num): num
log(a: num): num
gt(a: num, b: num): bool
lt(a: num, b: num): bool
ge(a: num, b: num): bool
le(a: num, b: num): bool
isNegative(a: num): bool
isPositive(a: num): bool
isZero(a: num): bool
isEven(a: num): bool
isOdd(a: num): bool

# Booleans

and(a: bool, b: bool): bool
or(a: bool, b: bool): bool
not(a: bool): bool
xor(a: bool, b: bool): bool

# String

subString(text: string, start: num, length: num): string
startsWith(text: string, pattern: string): bool
endsWith(text: string, pattern: string): bool
replace(text: string, old: string, new: string): string
uppercase(text: string): string
lowercase(text: string): string
trim(text: string): string
match(text: string, pattern: string): bool
split(text: string, delimiter: string): [string]
format(text: string, ...args): string

# Associative arrays

length(list: [T]): num
keys(list: [T]): [string]
values(list: [T]): [T]
concat(list1: [T], list2: [T]): [T]
isEmpty(list: [T]): bool
isNotEmpty(list: [T]): bool
get(index: num, list: [T]): T
set(index: num, value: T, list: [T]): [T]
contains(a: T, list: [T]): bool
join(list: [T], delimiter: string): string
first(list: [T]): T
last(list: [T]): T
tail(list: [T]): [T]
take(a: num, list: [T]): [T]
drop(a: num, list: [T]): [T]
addFirst(a: T, list: [T]): [T]
addLast(a: T, list: [T]): [T]
push(a: T, list[T]): [T]
pop(list: [T]): [T]
remove(index: num, list: [T]): [T]
removeFirst(list: [T]): [T]
removeLast(list: [T]): [T]
reverse(list: [T]): [T]

# Casting

toNumber(a: T): number
toInteger(a: T): number
toDecimal(a: T): number
toString(a: T): string
toBoolean(a: T): bool
isNumber(a: T): bool
isInteger(a: T): bool
isDecimal(a: T): bool
isString(a: T): bool
isBoolean(a: T): bool

# Control

if(condition: bool, exp1: T, exp2: T): T
try(exp1: T, exp2: T): T

# Error

error(a: T)

# Output

print(a: T): T
println(a: T): T

# Functions

map(func: function, list: [T]): [T]
filter(func: function, list: [T]): [T]
reduce(func: function, list: [T], initial: T): T
sort(func: function, list: [T]): [T]
all(func: function, list: [T]): bool
any(func: function, list: [T]): bool
zip(func: function, list1: [T], list2: [T]): [T]